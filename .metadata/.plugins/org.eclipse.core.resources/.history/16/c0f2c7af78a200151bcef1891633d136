package com.innovery.mpm.provisioning.implementations.gui.util;

import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JRadioButton;
import javax.swing.JTextArea;
import javax.swing.JTextField;

import com.innovery.mpm.connection.interfaces.component.DAPBeanInterface;
import com.innovery.mpm.provisioning.implementations.gui.util.options.ProvisioningDiscount;
import com.innovery.mpm.provisioning.implementations.gui.util.options.ProvisioningMaster;
import com.innovery.mpm.provisioning.implementations.gui.util.options.ProvisioningPostpone;
import com.innovery.mpm.provisioning.implementations.gui.util.options.ProvisioningTariffPlan;
import com.innovery.mpm.provisioning.implementations.gui.util.parameters.ProvisioningParameters;
import com.innovery.mpm.provisioning.implementations.util.OPTION_FAMILY;
import com.innovery.mpm.provisioning.implementations.xml.XmlScanner;
import com.innovery.mpm.provisioning.interfaces.gui.BsoResourceInterface;
import com.innovery.mpm.provisioning.interfaces.gui.util.ProvisioningUtilInterface;
import com.innovery.mpm.provisioning.interfaces.gui.util.ProvisioningOptionLoaderInterface;
import com.innovery.mpm.provisioning.interfaces.gui.util.options.ProvisioningDiscountInterface;
import com.innovery.mpm.provisioning.interfaces.gui.util.options.ProvisioningMasterInterface;
import com.innovery.mpm.provisioning.interfaces.gui.util.options.ProvisioningPostponeInterface;
import com.innovery.mpm.provisioning.interfaces.gui.util.options.ProvisioningTariffPlanInterface;
import com.innovery.mpm.provisioning.interfaces.gui.util.parameters.ProvisioningParametersInterface;
import com.innovery.mpm.provisioning.interfaces.xml.XmlScannerInterface;

public class ProvisioningUtil implements ProvisioningUtilInterface{

//	private BsoResourceInterface reference;
	private DAPBeanInterface components;
	
	private ButtonGroup actionButtonGroup;
	private ButtonGroup marketButtongroup;
	private ButtonGroup ctypeButtonGroup;
	
	private JComboBox optionComboboxSelection;
	
	private JTextArea textArea;
	private JButton btnExecute;
	private JFrame frame;
	
	private JTextField parameter_1_field;
	private JTextField parameter_2_field;
	private JTextField parameter_3_field;
	private JTextField parameter_4_field;
	private JTextField parameter_5_field;
	private JTextField parameter_6_field;
	
	private JLabel parameter_1_label;
	private JLabel parameter_2_label;
	private JLabel parameter_3_label;
	private JLabel parameter_4_label;
	private JLabel parameter_5_label;
	private JLabel parameter_6_label;
	
	private JRadioButton rdbtnIn;
	private JRadioButton rdbtnOut;
	private JRadioButton rdbtnBookOut;
	private JRadioButton rdbtnChange;
	private JRadioButton rdbtnGet;
	
	private JLabel discountLabel;
	private JComboBox discountComboboxSelection;
	
	private JLabel cugActionLabel;
	private JComboBox cugActionComboboxSelection;
	
	private String[] parametersList;
	
	private ProvisioningMasterInterface master;
	private ProvisioningDiscountInterface discount;
	private ProvisioningPostponeInterface postpone;
	private ProvisioningTariffPlanInterface tariff_plan;
	private ProvisioningOptionLoaderInterface optionLoader;
	private ProvisioningParametersInterface option_parameters;
	private XmlScannerInterface option_scanner;
	
	public static final int _HIDE_OPTIONAL_ONLY = 1;
	public static final int _HIDE_OPTIONAL_ACTION = 2;
	
	/**
	 * SE MARKET VIENE SELEZIONATO, SI CONTROLLA SE CTYPE E' SELEZIONATO E IN CASO LO E' SI VA AL CARICAMENTO DELLE OPZIONI PER QUEL SEGMENTO
	 */
	public void marketSelection(){
		optionalParametersAndAction(_HIDE_OPTIONAL_ACTION);
		if(ctypeButtonGroup.getSelection()!=null){
			optionComboboxSelection.removeAllItems();
			optionLoader.load();
			optionComboboxSelection.setEnabled(true);
		}
	}
	
	/**
	 * SE CTYPE VIENE SELEZIONATO, SI CONTROLLA SE MARKET E' SELEZIONATO E IN CASO LO E' SI VA AL CARICAMENTO DELLE OPZIONI PER QUEL SEGMENTO
	 */
	public void ctypeSelection(){
		optionalParametersAndAction(_HIDE_OPTIONAL_ACTION);
		if(marketButtongroup.getSelection()!=null){
			optionComboboxSelection.removeAllItems();
			optionLoader.load();
			optionComboboxSelection.setEnabled(true);
		}
	}
	
	
	public void serviceSelection(){
		optionalParametersAndAction(_HIDE_OPTIONAL_ACTION);
		if (optionComboboxSelection.getSelectedIndex()!=0) {
			showActions();
		} 
	}
	
	public void actionSelection() {
		if (optionComboboxSelection.getSelectedIndex()!=0  && actionButtonGroup.getSelection()!=null) {
			optionalParametersAndAction(_HIDE_OPTIONAL_ONLY);
			String parameters = null;
			/**
			 * CERCA QUALI SONO I PARAMETRI PREVISTI PER L'OPZIONE SCELTA E PER L'AZIONE SELEZIONATA
			 */
			parameters = option_scanner.getParameters(actionButtonGroup.getSelection().getActionCommand());
			components.getLogger().info("PARAMETERS: "+parameters);
			
			TechincalOptions();
			
			if(parameters!=null){
				showParameters(parameters);
			}
		}
	}
	
	
	private void showActions(){
		/**
		 * VA A CERCARE QUALI SONO LE ACTION AMMESSE PER L'OPZIONE SELEZIONATA
		 */
		if (optionComboboxSelection.getSelectedIndex()!=0) {
			String actions = null;
			option_scanner.loadSelectedOption(reference);
			actions = option_scanner.getActionSelectedOption();
			if (actions != null) {
				if (actions.equals(OPTION_FAMILY.POSTPONE)){
					postpone = new ProvisioningPostpone();
					postpone.setReference(reference);
					postpone.setComponents(components);
					postpone.enable();
				}else if(actions.equals(OPTION_FAMILY.DISCOUNT)){
					discount = new ProvisioningDiscount();
					discount.setReference(reference);
					discount.setComponents(components);
					discount.enable();
				}else if(actions.equals(OPTION_FAMILY.TARIFF_PLAN) || ((String) optionComboboxSelection.getSelectedItem()).startsWith("GET")){
					tariff_plan = new ProvisioningTariffPlan();
					tariff_plan.setReference(reference);
					tariff_plan.enable();
				}else if (!actions.equals(OPTION_FAMILY.POSTPONE) && !actions.equals(OPTION_FAMILY.DISCOUNT)) {
					master = new ProvisioningMaster();
					master.setReference(reference);
					master.setComponents(components);
					master.enable(actions);
				}
			}
		}
	}
	
	private void showParameters(String parameters){
		if(parameters!=null && !parameters.equals("")){
			String[] localParametersList = parameters.split("\\|");
//			reference.setParametersList(localParametersList);
			
			parametersList = localParametersList;
			
			reference.getInputParametersRegex().clear();
			for (int i = 0; i < reference.getParametersList().length; i++) {
				
				String new_parameter;
				
				if(reference.getParametersList()[i].contains("[") && reference.getParametersList()[i].contains("]")){
					new_parameter = components.getCommonGUI().optional(reference.getParametersList()[i]);
				}
				else {
					new_parameter = components.getCommonGUI().mandatory(reference.getParametersList()[i]);
				}
				
				reference.getLabelList().get(i).setText(new_parameter);
				reference.getInputParametersRegex().add(option_scanner.getRegex(reference.getParametersList()[i]));
				
				if(reference.getLabelList().get(i).getText().contains("FEEDISCOUNT")){
					option_parameters.enableParameterDiscount(i);
				}
				else{
					option_parameters.enableOtherParameters(i);
				}
			}
		}
	}
	
	private void TechincalOptions(){
		if(optionComboboxSelection.getSelectedItem().equals("cug")){
			option_parameters.enableTechnicalOptionParameters();
		}
	}
	
	public void backButtonActionPerformed() {
		if (btnExecute.getActionCommand().equals("reconnect")) {
			components.getLogger().info("Clicked on Reconnect");
			
			String redirect = components.getConnectionManagerStandard().reconnectionStandard(btnExecute.getActionCommand());
			
			textArea.setText(redirect);
			reference.getGrid_managment().resetResponseGrid();
			reference.getGrid_managment().setResponseGridStatusMessage(redirect);
			if (redirect.equals(components.getErrorMessages().get_RELOGGED())) {
				btnExecute.setText("Execute");
				btnExecute.setActionCommand("execute");
			}
			else if (redirect.equals(components.getErrorMessages().get_NOT_LOGGED_ERROR()) || 
					 redirect.equals(components.getErrorMessages().get_MPM_CONNECTION_ERROR()) || 
					 redirect.equals(components.getErrorMessages().get_MPM_ERROR())) {
				btnExecute.setText("Home");
				btnExecute.setActionCommand("home");
			}

		} else if (btnExecute.getActionCommand().equals("home")){
			components.getLogger().info("Clicked on Home");
			frame.dispose();
		}
	}

	public void setReference(BsoResourceInterface reference) {
		this.reference = reference;
		
		optionLoader = new ProvisioningOptionLoader();
		optionLoader.setReference(this.reference);
		
		option_parameters = new ProvisioningParameters();
		option_parameters.setReference(this.reference);
		
		option_scanner = new XmlScanner();
		
	}

	public void setComponents(DAPBeanInterface components) {
		this.components = components;
		optionLoader.setComponents(components);
		option_scanner.setComponents(components);
	}
	
	private void optionalParametersAndAction(int toHide) {
		
		discountComboboxSelection.setVisible(false); discountLabel.setVisible(false);
		parameter_1_label.setVisible(false); parameter_1_field.setVisible(false); parameter_1_field.setText("");
		parameter_2_label.setVisible(false); parameter_2_field.setVisible(false); parameter_2_field.setText("");
		parameter_3_label.setVisible(false); parameter_3_field.setVisible(false); parameter_3_field.setText("");
		parameter_4_label.setVisible(false); parameter_4_field.setVisible(false); parameter_4_field.setText("");
		parameter_5_label.setVisible(false); parameter_5_field.setVisible(false); parameter_5_field.setText("");
		parameter_6_label.setVisible(false); parameter_6_field.setVisible(false); parameter_6_field.setText("");
		
		cugActionLabel.setVisible(false); cugActionComboboxSelection.setVisible(false); cugActionComboboxSelection.clearSelection();

		if(toHide == ProvisioningUtil._HIDE_OPTIONAL_ACTION){
			
			actionButtonGroup.clearSelection();
			rdbtnIn.setEnabled(false); 
			rdbtnOut.setEnabled(false); 
			rdbtnBookOut.setEnabled(false); 
			rdbtnChange.setEnabled(false); 
			rdbtnGet.setEnabled(false);
			textArea.setText("");
		}
	}
	
}
