package com.innovery.mpm.af.implementations.gui;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

import javax.swing.JFrame;

import com.innovery.mpm.af.implementations.util.AFActions;
import com.innovery.mpm.af.interfaces.gui.AccountFinderInterface;
import com.innovery.mpm.af.interfaces.gui.util.AccountFinderResponseGridManagerInterface;
import com.innovery.mpm.af.interfaces.gui.util.AccountFinderResponseManagerInterface;
import com.innovery.mpm.af.interfaces.gui.util.AccountFinderUtilInterface;
import com.innovery.mpm.af.interfaces.gui.verification.AccountFinderVerifyInterface;
import com.innovery.mpm.connection.implementations.util.gui.GUICommonInterface;
import com.innovery.mpm.connection.interfaces.component.DAPBeanInterface;
import com.innovery.mpm.connection.interfaces.standard.session.SessionStandardInterface;
import com.innovery.mpm.connection.interfaces.util.AutoCompleteMsisdnInterface;

import javax.swing.JPanel;

import java.awt.BorderLayout;

import javax.swing.JLabel;
import javax.swing.JTextField;

import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Font;

import javax.swing.JButton;
import javax.swing.border.TitledBorder;

import org.apache.log4j.Logger;

import javax.swing.border.LineBorder;

import java.awt.Color;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

import javax.swing.ButtonGroup;
import javax.swing.JTextArea;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.KeyStroke;
import javax.swing.SwingConstants;
import javax.swing.JRadioButton;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

/**
 * 
 * @author Daniela R. Auricchio, Valerio Boschi
 * 
 */
public class AccountFinder implements AccountFinderInterface{
	
	private JFrame frame;
	private JPanel panel_center;
	private JPanel command_fieldset;
	private JPanel response_fieldset;
	private JPanel response_fieldset_grid;
	private JPanel execute_details_panel;
	
	private JRadioButton rdbtnActivation;
	private JRadioButton rdbtnDeactivation;
	private JRadioButton rdbtnAssurance;
	
	private JButton btnExecute;
	private JButton button_details;
	
	private JTextField msisdn_field;
	private JTextArea textArea;
	private ButtonGroup radioGroupAction;
	private ButtonGroup radioGroupMarket;
	
	private JRadioButton rdbtnConsumer;
	private JRadioButton rdbtnCorporate;
	
	private JLabel sdp_host_name_label;
	
	private JComboBox sdp_selection;
	
	private AccountFinderResponseManagerInterface response_manager;
	private AccountFinderVerifyInterface verification;
	private AccountFinderUtilInterface util;
	private AccountFinderResponseGridManagerInterface grid_managment;
	
	private Logger logger;
	private AutoCompleteMsisdnInterface msisdnCompleter;
	private SessionStandardInterface sessionStandard;
	private GUICommonInterface commonGUI;
	
	public void initialize() {
		logger.info("INITIALIZING ACCOUNT FINDER");
		setFrameInitialSettings();
		setPanelNorth();
		setPanelSouth();
		setPanelWest();
		setPanelEast();
		setPanelCenter();
		
		setAfCommandField();
		
		rdbtnActivation = new JRadioButton(AFActions.AF_ACTION_CREATE);
		rdbtnActivation.setActionCommand(AFActions.AF_ACTION_CREATE);
		rdbtnActivation.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				util.actionOnClick();
			}
		});

		rdbtnDeactivation = new JRadioButton(AFActions.AF_ACTION_DELETE);
		rdbtnDeactivation.setActionCommand(AFActions.AF_ACTION_DELETE);
		rdbtnDeactivation.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				util.actionOnClick();
			}
		});

		rdbtnAssurance = new JRadioButton(AFActions.AF_ACTION_GET);
		rdbtnAssurance.setActionCommand(AFActions.AF_ACTION_GET);
		rdbtnAssurance.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				util.actionOnClick();
			}
		});
		
		util.userLevel();
		
		setActionLabel();
		setRadioActionGroup();
		setRadioActionPanel();
		
		rdbtnConsumer = new JRadioButton(DAPBeanInterface.CONSUMER);
		rdbtnConsumer.setActionCommand(DAPBeanInterface.CONSUMER);
		rdbtnConsumer.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				util.actionOnClick();
			}
		});
		
		rdbtnCorporate = new JRadioButton(DAPBeanInterface.CORPORATE);
		rdbtnCorporate.setActionCommand(DAPBeanInterface.CORPORATE);
		rdbtnCorporate.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				util.actionOnClick();
			}
		});
		
		setMarketLabel();
		setRadioMarketPanel();
		setRadioMarketGroup();
		
		setMsisdnLabel();
		setMsisdnText();
		
		setHostNameLabel();
		setHostNameCombo();
		
		setRespondeField();
		setRespondeFieldComponents();
		setTextArea();
		
		setExecuteButton();
		setButtonDetails();
		
		setAccountFinderResponseGridClass();
		setAccountFinderUtilClass();
		
		frame.setVisible(true);
	}

	private void setFrameInitialSettings(){
		frame = new JFrame();
		frame.setResizable(false);
		frame.setSize(1190, 700);
		frame.setTitle("Dashboard Assurance Prepaid - ACCOUNT FINDER");
		frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
	    frame.getRootPane().getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke("ENTER"), "none");
	    frame.getRootPane().getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke("released ENTER"), "press");

		frame.addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosing(WindowEvent e) {
				frame.dispose();
			}
		});
	}
	
	private void setPanelNorth(){
		JPanel panel_north = new JPanel();
		FlowLayout flowLayout_north = (FlowLayout) panel_north.getLayout();
		flowLayout_north.setVgap(5);
		frame.getContentPane().add(panel_north, BorderLayout.NORTH);

		JLabel title_label = new JLabel("ACCOUNT FINDER");
		title_label.setFont(commonGUI.setFontSize(18));
		panel_north.add(title_label);
	}

	private void setPanelSouth(){
		JPanel panel_south = new JPanel();
		GridBagLayout gbl_panel_south = new GridBagLayout();
		gbl_panel_south.columnWidths = new int[]{0, 0};
		gbl_panel_south.rowHeights = new int[] {16, 0};
		gbl_panel_south.columnWeights = new double[]{1.0, Double.MIN_VALUE};
		gbl_panel_south.rowWeights = new double[]{0.0, Double.MIN_VALUE};
		panel_south.setLayout(gbl_panel_south);
		frame.getContentPane().add(panel_south, BorderLayout.SOUTH);
		JLabel devByLabel = new JLabel();
		devByLabel.setText("- By Innovery S.p.A. -");
		devByLabel.setHorizontalAlignment(SwingConstants.CENTER);
		devByLabel.setForeground(Color.DARK_GRAY);
		devByLabel.setFont(commonGUI.setFontSize(Font.BOLD, 11));
		panel_south.add(devByLabel, commonGUI.setContraints(5, 0, 3, 0, 0, 0));
	}
	
	private void setPanelWest(){
		JPanel panel_west = new JPanel();
		FlowLayout flowLayout_west = (FlowLayout) panel_west.getLayout();
		flowLayout_west.setHgap(10);
		frame.getContentPane().add(panel_west, BorderLayout.WEST);
	}
	
	private void setPanelEast(){
		JPanel panel_east = new JPanel();
		FlowLayout flowLayout_east = (FlowLayout) panel_east.getLayout();
		flowLayout_east.setHgap(10);
		frame.getContentPane().add(panel_east, BorderLayout.EAST);
	}
	
	private void setPanelCenter(){
		panel_center = new JPanel();
		frame.getContentPane().add(panel_center, BorderLayout.CENTER);
		GridBagLayout gbl_panel_center = new GridBagLayout();
		gbl_panel_center.columnWidths = new int[] {711, 0};
		gbl_panel_center.rowHeights = new int[] {628, 0};
		gbl_panel_center.columnWeights = new double[] { 0.0, 1.0 };
		gbl_panel_center.rowWeights = new double[] { 1.0, Double.MIN_VALUE };
		panel_center.setLayout(gbl_panel_center);
	}
	
	private void setAfCommandField(){
		command_fieldset = new JPanel();
		command_fieldset.setBorder(new TitledBorder(new LineBorder(new Color(171, 173, 179)), "ACCOUNT FINDER", TitledBorder.LEADING, TitledBorder.TOP, commonGUI.setFontSize(Font.BOLD, 13), null));
		panel_center.add(command_fieldset, commonGUI.setContraints(GridBagConstraints.BOTH, 5, 0, 5, 5, 0, 0));
		GridBagLayout gbl_command_fieldset = new GridBagLayout();
		gbl_command_fieldset.columnWidths = new int[] {113, 578, 0};
		gbl_command_fieldset.rowHeights = new int[] { 0, 0, 0, 0, 0, 0 };
		gbl_command_fieldset.columnWeights = new double[] { 0.0, 0.0, Double.MIN_VALUE };
		gbl_command_fieldset.rowWeights = new double[] { 0.0, 0.0, 0.0, 0.0, 1.0, Double.MIN_VALUE };
		command_fieldset.setLayout(gbl_command_fieldset);
	}
	
	private void setRespondeField(){
		response_fieldset = new JPanel();
		response_fieldset.setBorder(new TitledBorder(new LineBorder(new Color(171, 173, 179)), "Response",	TitledBorder.LEADING, TitledBorder.TOP, commonGUI.setFontSize(Font.BOLD, 13), null));
		GridBagLayout gbl_response_fieldset = new GridBagLayout();
		gbl_response_fieldset.columnWidths = new int[]{0, 0};
		gbl_response_fieldset.rowHeights = new int[] { 300, 0};
		gbl_response_fieldset.columnWeights = new double[] { 1.0, Double.MIN_VALUE };
		gbl_response_fieldset.rowWeights = new double[] { 1.0, Double.MIN_VALUE };
		response_fieldset.setLayout(gbl_response_fieldset);
		panel_center.add(response_fieldset, commonGUI.setContraints(GridBagConstraints.BOTH, 5, 0, 5, 0, 1, 0));
	}
	
	private void setRespondeFieldComponents(){
		setResponseFieldGrid();
		setExecuteDetailsPanel();
		setTextArea();
	}
	
	public void resetResponseGrid(){
		response_fieldset.remove(response_fieldset_grid);
		response_fieldset.validate();
		response_fieldset.repaint();
		setResponseFieldGrid();
	}
	
	private void setResponseFieldGrid(){
		response_fieldset_grid = new JPanel();
		GridBagLayout gbl_response_fieldset_grid = new GridBagLayout();
		gbl_response_fieldset_grid.columnWidths = new int[] {120, 142};
		gbl_response_fieldset_grid.rowHeights = new int[]{0, 0, 0};
		gbl_response_fieldset_grid.columnWeights = new double[]{0.0, Double.MIN_VALUE};
		gbl_response_fieldset_grid.rowWeights = new double[]{0.0, 0.0, Double.MIN_VALUE};
		response_fieldset_grid.setLayout(gbl_response_fieldset_grid);
		response_fieldset.add(response_fieldset_grid, commonGUI.setContraints(GridBagConstraints.BOTH, 0, 0, 5, 0, 0, 0));
	}
	
	private void setExecuteDetailsPanel(){
		execute_details_panel = new JPanel();
		GridBagLayout gbl_execute_details_panel = new GridBagLayout();
		gbl_execute_details_panel.columnWidths = new int[]{0, 0, 0};
		gbl_execute_details_panel.rowHeights = new int[]{0, 0};
		gbl_execute_details_panel.columnWeights = new double[]{1.0, 1.0, Double.MIN_VALUE};
		gbl_execute_details_panel.rowWeights = new double[]{0.0, Double.MIN_VALUE};
		execute_details_panel.setLayout(gbl_execute_details_panel);
		response_fieldset.add(execute_details_panel, commonGUI.setContraints(GridBagConstraints.BOTH,0, 0, 5, 0, 0, 1));
	}
	
	private void setTextArea(){
		textArea = new JTextArea();
		textArea.setLineWrap(true);
		textArea.setEditable(false);
		textArea.setVisible(false);
		response_fieldset.add(textArea, commonGUI.setContraints(GridBagConstraints.BOTH, 5, 0, 5, 0, 0, 0));
	}
	
	private void setRadioActionGroup(){
		radioGroupAction = new ButtonGroup();
		radioGroupAction.add(rdbtnActivation);
		radioGroupAction.add(rdbtnDeactivation);
		radioGroupAction.add(rdbtnAssurance);
	}
	
	private void setRadioMarketGroup(){
		radioGroupMarket = new ButtonGroup();
		radioGroupMarket.add(rdbtnConsumer);
		radioGroupMarket.add(rdbtnCorporate);

		if (sessionStandard.getCurrent_market().equals(DAPBeanInterface.CONSUMER)) {
			radioGroupMarket.setSelected(rdbtnConsumer.getModel(), true);
		}
		else if(sessionStandard.getCurrent_market().equals(DAPBeanInterface.CORPORATE)){
			radioGroupMarket.setSelected(rdbtnCorporate.getModel(), true);
		}
	}
	
	private void setActionLabel(){
		JLabel action_label = new JLabel("Action*");
		action_label.setHorizontalAlignment(SwingConstants.RIGHT);
		command_fieldset.add(action_label, commonGUI.setContraints(GridBagConstraints.VERTICAL, GridBagConstraints.WEST, 5, 5, 0, 5, 0, 0));
	}
	
	private void setMarketLabel(){
		JLabel market_label = new JLabel("Market*");
		market_label.setHorizontalAlignment(SwingConstants.RIGHT);
		command_fieldset.add(market_label, commonGUI.setContraints(GridBagConstraints.VERTICAL, GridBagConstraints.WEST, 5, 5, 0, 5, 0, 1));
	}
	
	private void setMsisdnLabel(){
		JLabel msisdn_label = new JLabel("MSISDN*");
		msisdn_label.setHorizontalAlignment(SwingConstants.RIGHT);
		command_fieldset.add(msisdn_label, commonGUI.setContraints(GridBagConstraints.VERTICAL, GridBagConstraints.WEST, 5, 5, 0, 5, 0, 2));
	}
	
	private void setHostNameLabel(){
		sdp_host_name_label = new JLabel("Hostname*");
		sdp_host_name_label.setVisible(false);
		sdp_host_name_label.setHorizontalAlignment(SwingConstants.RIGHT);
		command_fieldset.add(sdp_host_name_label, commonGUI.setContraints(GridBagConstraints.VERTICAL, GridBagConstraints.WEST, 10, 5, 0, 5, 0, 3));
	}
	
	private void setMsisdnText(){
		msisdn_field = new JTextField();
		msisdn_field.setColumns(10);
		msisdn_field.setText(sessionStandard.getCurrent_msisdn());
		command_fieldset.add(msisdn_field, commonGUI.setContraints(GridBagConstraints.VERTICAL, GridBagConstraints.WEST, 5, 0, 0, 0, 1, 2));
		msisdn_field.setEnabled(false);
		JComboBox msisdn_combo = msisdnCompleter.setupAutoComplete(msisdn_field);
		msisdn_field.setLayout(new BorderLayout());
		msisdn_field.add(msisdn_combo, BorderLayout.SOUTH);
	}
	
	private void setHostNameCombo(){
		sdp_selection = new JComboBox(util.compileComboBox());
		sdp_selection.setVisible(false);
		sdp_selection.setPrototypeDisplayValue("***************");
		sdp_selection.setMaximumRowCount(5);
		command_fieldset.add(sdp_selection, commonGUI.setContraints(GridBagConstraints.VERTICAL, GridBagConstraints.WEST, 5, 0, 0, 0, 1, 3));
		sdp_selection.setEnabled(false);
	}

	private void setRadioActionPanel(){
		JPanel radioGroupAction_panel = new JPanel();
		command_fieldset.add(radioGroupAction_panel, commonGUI.setContraints(GridBagConstraints.VERTICAL, GridBagConstraints.WEST, 5, 0, 0, 0, 1, 0));
		GroupLayout gl_radioGroupAction_panel = new GroupLayout(radioGroupAction_panel);
		gl_radioGroupAction_panel.setHorizontalGroup(
			gl_radioGroupAction_panel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_radioGroupAction_panel.createSequentialGroup()
					.addContainerGap()
					.addComponent(rdbtnActivation, GroupLayout.PREFERRED_SIZE, 90, GroupLayout.PREFERRED_SIZE)
					.addGap(18)
					.addComponent(rdbtnDeactivation, GroupLayout.PREFERRED_SIZE, 90, GroupLayout.PREFERRED_SIZE)
					.addGap(18)
					.addComponent(rdbtnAssurance, GroupLayout.PREFERRED_SIZE, 90, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
		);
		gl_radioGroupAction_panel.setVerticalGroup(
			gl_radioGroupAction_panel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_radioGroupAction_panel.createSequentialGroup()
					.addGroup(gl_radioGroupAction_panel.createParallelGroup(Alignment.BASELINE)
						.addComponent(rdbtnActivation, GroupLayout.PREFERRED_SIZE, 16, GroupLayout.PREFERRED_SIZE)
						.addComponent(rdbtnAssurance, GroupLayout.PREFERRED_SIZE, 16, GroupLayout.PREFERRED_SIZE)
						.addComponent(rdbtnDeactivation, GroupLayout.PREFERRED_SIZE, 16, GroupLayout.PREFERRED_SIZE))
					.addContainerGap(6, Short.MAX_VALUE))
		);
		gl_radioGroupAction_panel.setAutoCreateContainerGaps(true);
		radioGroupAction_panel.setLayout(gl_radioGroupAction_panel);
	}
	
	private void setRadioMarketPanel(){
		JPanel radioGroupMarket_panel = new JPanel();
		command_fieldset.add(radioGroupMarket_panel, commonGUI.setContraints(GridBagConstraints.VERTICAL, GridBagConstraints.WEST, 5, 0, 0, 0, 1, 1));
		GroupLayout gl_radioGroupMarket_panel = new GroupLayout(radioGroupMarket_panel);
		gl_radioGroupMarket_panel.setHorizontalGroup(
			gl_radioGroupMarket_panel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_radioGroupMarket_panel.createSequentialGroup()
					.addGap(6)
					.addComponent(rdbtnConsumer, GroupLayout.PREFERRED_SIZE, 90, GroupLayout.PREFERRED_SIZE)
					.addGap(18)
					.addComponent(rdbtnCorporate, GroupLayout.PREFERRED_SIZE, 90, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(18, Short.MAX_VALUE))
		);
		gl_radioGroupMarket_panel.setVerticalGroup(
			gl_radioGroupMarket_panel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_radioGroupMarket_panel.createSequentialGroup()
					.addGroup(gl_radioGroupMarket_panel.createParallelGroup(Alignment.BASELINE, false)
						.addComponent(rdbtnConsumer, GroupLayout.PREFERRED_SIZE, 16, GroupLayout.PREFERRED_SIZE)
						.addComponent(rdbtnCorporate, GroupLayout.PREFERRED_SIZE, 16, GroupLayout.PREFERRED_SIZE))
					.addGap(6))
		);
		gl_radioGroupMarket_panel.setAutoCreateContainerGaps(true);
		radioGroupMarket_panel.setLayout(gl_radioGroupMarket_panel);
	}

	private void setExecuteButton(){
		btnExecute = new JButton(AFActions.AF_ACTION_EXECUTE);
		btnExecute.setActionCommand(AFActions.AF_ACTION_EXECUTE);
		execute_details_panel.add(btnExecute, commonGUI.setContraints(GridBagConstraints.CENTER, GridBagConstraints.WEST, 0, 0, 5, 0, 0, 0));
		frame.getRootPane().setDefaultButton(btnExecute);
		btnExecute.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				btnExecute.setEnabled(false);
				if(btnExecute.getActionCommand().equals(AFActions.AF_ACTION_EXECUTE)){
					setAccountFinderVerificationClass();
					if (verification.verify()==true) {
						Thread thread = new Thread(new Runnable() {
						    public void run() {
						            try {
						                Thread.sleep(100); //to give time for users to read
						            } catch (InterruptedException e) {
						            	logger.warn(e.getMessage());
						            }finally{
						            	resetResponseGrid();
						            	setAccountFinderResponseGridClass();
						            	setAccountFinderResponseManagerClass();
						                response_manager.getResponse();
						            }
						    }
						});
						thread.start();	
					}
					else{
						btnExecute.setEnabled(true);
					}
				}
				else{
					resetResponseGrid();
					setAccountFinderResponseGridClass();
					util.backButtonActionPerformed(e);
					btnExecute.setEnabled(true);
				}
			}
		});
	}
	
	private void setButtonDetails(){
		button_details = new JButton("+");
		button_details.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent arg0) {
				if(textArea.isVisible()){
					textArea.setVisible(false);
					response_fieldset_grid.setVisible(true);
					button_details.setText("+");
				}
				else{
					textArea.setVisible(true);
					response_fieldset_grid.setVisible(false);
					button_details.setText("-");
				}
			}
		});
		execute_details_panel.add(button_details, commonGUI.setContraints(GridBagConstraints.CENTER, GridBagConstraints.EAST, 0, 0, 5, 0, 1, 0));
	}
	
	private void setAccountFinderResponseGridClass(){
		grid_managment.setResponseFieldset(response_fieldset);
		grid_managment.setResponseFieldsetGrid(response_fieldset_grid);
		grid_managment.setActionButtonGroup(radioGroupAction);
	}
	
	private void setAccountFinderResponseManagerClass(){
		response_manager.setGridManager(grid_managment);
		response_manager.setTextArea(textArea);
		response_manager.setBtnExecute(btnExecute);
		response_manager.setMsisdnField(msisdn_field);
		response_manager.setActionButtonGroup(radioGroupAction);
		response_manager.setMarketButtonGroup(radioGroupMarket);
		response_manager.setSdpComboboxSelection(sdp_selection);
	}
	
	private void setAccountFinderVerificationClass(){
		verification.setMsisdnField(msisdn_field);
		verification.setActionButtonGroup(radioGroupAction);
		verification.setMarketButtonGroup(radioGroupMarket);
		verification.setSdpComboboxSelection(sdp_selection);
	}
	
	private void setAccountFinderUtilClass(){
		util.setFrame(frame);
		util.setMsisdnTextField(msisdn_field);
		util.setActionButtonGroup(radioGroupAction);
		util.setMarketButtonGroup(radioGroupMarket);
		util.setSdpComboboxSelection(sdp_selection);
		util.setSdpLabel(sdp_host_name_label);
		util.setBtnExecute(btnExecute);
		util.setRdbtnActivation(rdbtnActivation);
		util.setRdbtnDeactivation(rdbtnDeactivation);
		util.setTextArea(textArea);
		util.setGridManager(grid_managment);
	}
	
	public JFrame getFrame() {
		return frame;
	}

	public JButton getBtnExecute() {
		return btnExecute;
	}

	public void setVerification(AccountFinderVerifyInterface verification) {
		this.verification = verification;
	}

	public void setUtil(AccountFinderUtilInterface util) {
		this.util = util;
	}

	public void setResponse_manager(AccountFinderResponseManagerInterface response_manager) {
		this.response_manager = response_manager;
	}

	public void setGrid_managment(AccountFinderResponseGridManagerInterface grid_managment) {
		this.grid_managment = grid_managment;
	}

	public void setCommonGUI(GUICommonInterface commonGUI) {
		this.commonGUI = commonGUI;
	}

	public void setSessionStandard(SessionStandardInterface sessionStandard) {
		this.sessionStandard = sessionStandard;
	}

	public void setLogger(Logger logger) {
		this.logger = logger;
	}

	public void setMsisdnCompleter(AutoCompleteMsisdnInterface msisdnCompleter) {
		this.msisdnCompleter = msisdnCompleter;
	}
}